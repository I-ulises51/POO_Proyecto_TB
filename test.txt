// code
module FSM(
input clk, rst,
input [1:0] in,
output reg [0:0] out);
reg [1:0] state, next_s;

//impresion de parametros de estado
parameter S0= 2'b0X;
parameter S1= 2'bX1;

initial begin
    state = S0;
end

always @(posedge clk or posedge rst)
    begin
        if (rst) state <=S0;
        else state <= next_s;
    end

always @(state or in)
    begin
        case (state)
            S0:
            casex(in)
                2'b0x: next_s = S1;
                2'bx0: next_s = S0;
                default: next_s = S0;
            endcase
            S1:
            casex(in)
                2'bx0: next_s = S0;
                2'bx1: next_s = S1;
                default: next_s = S1;
            endcase
            default: next_s = S0;
        endcase
    end

always @(state or in)
    begin
        case (state)
            S0:
            casex(in)
                2'b0x: out = 1'b0;
                2'bx0: out = 1'b0;
                default: out = 1'bx;
            endcase
            S1:out = 1'b0;
        endcase
    end


endmodule